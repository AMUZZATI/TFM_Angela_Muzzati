#TFM ÁNGELA MUZZATI 

# FASE 0
import pandas as pd
import sqlite3
import holidays
import os
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import squarify # Librería para el gráfico de rectángulos

# Fijo la aleatoriedad para que los resultados sean siempre los mismos
random.seed(42)
np.random.seed(42)

RUTA_PROYECTO = "C:\\Users\\amuzzati\\Documents\\MASTER"
CARPETA_RAW = os.path.join(RUTA_PROYECTO, "01_data_raw")
CARPETA_PROCESADOS = os.path.join(RUTA_PROYECTO, "02_data_processed")
CARPETA_GRAFICOS = os.path.join(RUTA_PROYECTO, "05_graficos")

os.makedirs(CARPETA_PROCESADOS, exist_ok=True)
os.makedirs(CARPETA_GRAFICOS, exist_ok=True)
print("✅ Fase 0: Configuración completada.")

# FASE 1
print("\n--- Fase 1: Procesando y enriqueciendo datos...")
autonomias = { "Morella": "VC", "Balmaseda": "PV", "Puebla de Sanabria": "CL", "Sopuerta": "PV", "Culla": "VC", "La Seu d'Urgell": "CT", "Lorca": "MC", "Pobladura del Valle": "CL", "Bermeo": "PV", "Frías": "CL", "Baena": "AN", "Onda": "VC", "Gautegiz Arteaga": "PV" }
archivos_a_procesar = [f for f in os.listdir(CARPETA_RAW) if f.endswith('.csv')]
def generar_clima_sintetico(fecha):
    mes = fecha.month
    if mes in [6, 7, 8]: temp, precip = random.uniform(22, 35), random.choice([0,0,0,0.5])
    elif mes in [3, 4, 5]: temp, precip = random.uniform(14, 25), random.choice([0,0.5,1.5])
    elif mes in [9, 10, 11]: temp, precip = random.uniform(12, 23), random.choice([0,1,2.5,4])
    else: temp, precip = random.uniform(4, 15), random.choice([0,2,4,7])
    return {'temperatura': round(temp, 2), 'precipitacion': precip}
def es_festivo(fecha, ccaa_cod): return fecha in holidays.Spain(prov=ccaa_cod)
lista_df_mejorados = []
for nombre_archivo in archivos_a_procesar:
    ruta_lectura = os.path.join(CARPETA_RAW, nombre_archivo)
    df = pd.read_csv(ruta_lectura)
    if 'Fecha de entrada' not in df.columns: continue
    df.columns = [col.strip() for col in df.columns]
    df['Fecha de entrada'] = pd.to_datetime(df['Fecha de entrada'])
    df['temperatura_media'], df['precipitacion'], df['es_festivo'] = [0.0, 0.0, False]
    for indice, fila in df.iterrows():
        fecha = fila['Fecha de entrada'].date()
        municipio = fila['Área de actucaravana'].strip()
        clima = generar_clima_sintetico(fecha)
        df.loc[indice, ['temperatura_media', 'precipitacion']] = clima['temperatura'], clima['precipitacion']
        if municipio in autonomias and es_festivo(fecha, autonomias[municipio]): df.loc[indice, 'es_festivo'] = True
    lista_df_mejorados.append(df)
df_maestro = pd.concat(lista_df_mejorados, ignore_index=True)
print("✅ Fase 1: ¡Datos procesados!")

# --- FASE 2: INGENIERÍA DE VARIABLES Y ARQUITECTURA DE DATOS ---
print("\n--- Fase 2: Creando nuevas variables y arquitectura...")
def obtener_temporada(mes):
    if mes in [6, 7, 8]: return 'Verano'
    if mes in [12, 1, 2]: return 'Invierno'
    if mes in [3, 4, 5]: return 'Primavera'
    return 'Otono'
df_maestro['temporada'] = pd.to_datetime(df_maestro['Fecha de entrada']).dt.month.apply(obtener_temporada)
ruta_maestra_csv = os.path.join(CARPETA_PROCESADOS, "Base_de_Datos_Maestra.csv")
df_maestro.to_csv(ruta_maestra_csv, index=False)

# Creación de la base de datos (Arquitectura)
ruta_db = os.path.join(CARPETA_PROCESADOS, "TFM_Reservas.db")
conn = sqlite3.connect(ruta_db)
df_crudo_total = pd.concat([pd.read_csv(os.path.join(CARPETA_RAW, f)) for f in archivos_a_procesar], ignore_index=True)
df_crudo_total.to_sql('reservas_raw', conn, if_exists='replace', index=False)
df_maestro.to_sql('reservas_clean', conn, if_exists='replace', index=False)
conn.close()
print("✅ Fase 2: ¡Nuevas variables creadas y base de datos generada!")

# --- FASE 3: ANÁLISIS EXPLORATORIO DE DATOS (EDA) ---
print("\n--- Fase 3: Generando gráficos exploratorios...")
sns.set_theme(style="whitegrid")

# Gráfico 1: Boxplot Gasto por Temporada
plt.figure(figsize=(10, 6))
sns.boxplot(x='temporada', y='Gasto total (€)', data=df_maestro, order=['Primavera', 'Verano', 'Otono', 'Invierno'])
plt.title('Distribución del Gasto Total por Temporada', fontsize=16)
plt.show()

# Gráfico 2: Heatmap de Correlaciones
variables_numericas = df_maestro.select_dtypes(include=np.number).columns.tolist()
plt.figure(figsize=(12, 10))
sns.heatmap(df_maestro[variables_numericas].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Mapa de Calor de Correlaciones Numéricas', fontsize=16)
plt.show()

# Gráfico 3: Scatter Plot de Relaciones
plt.figure(figsize=(14, 8))
sns.scatterplot(data=df_maestro, x='Nº noches', y='Gasto total (€)', size='Nº personas', hue='Área de actucaravana', sizes=(50, 500), alpha=0.7)
plt.title('Relación entre Gasto, Noches y Personas por Área', fontsize=16)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.tight_layout()
plt.show()

# Gráfico 4: Treemap de Contribución por Área
df_gasto_area = df_maestro.groupby('Área de actucaravana')['Gasto total (€)'].sum().reset_index()
plt.figure(figsize=(16, 8))
squarify.plot(sizes=df_gasto_area['Gasto total (€)'], label=df_gasto_area['Área de actucaravana'], alpha=0.8)
plt.title('Contribución al Gasto Total por Área', fontsize=16)
plt.axis('off')
plt.show()
print("✅ Fase 3: ¡Análisis exploratorio finalizado!")

# --- FASE 4: COMPARACIÓN DE MODELOS ---
print("\n--- Fase 4: Entrenando y comparando modelos...")
df_modelado = df_maestro.copy()
df_modelado = pd.get_dummies(df_modelado, columns=['temporada', 'Área de actucaravana'], drop_first=True)
df_modelado['Reserva anticipada'] = df_modelado['Reserva anticipada'].astype(int)
df_modelado['es_festivo'] = df_modelado['es_festivo'].astype(int)
X = df_modelado.drop(columns=['Gasto total (€)', 'Fecha de entrada', 'Fecha de salida'])
X = X.select_dtypes(include=np.number)
y = df_modelado['Gasto total (€)']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelo 1: Regresión Lineal
lr = LinearRegression().fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
r2_lr = r2_score(y_test, y_pred_lr)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))

# Modelo 2: Random Forest (No lineal)
rf = RandomForestRegressor(n_estimators=100, random_state=42).fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
r2_rf = r2_score(y_test, y_pred_rf)
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))

print("\n\n--- TABLA COMPARATIVA DE MODELOS DE REGRESIÓN ---")
print("="*45)
print(f"| {'Modelo':<21} | {'R²':<7} | {'RMSE (Error Medio)':<20} |")
print(f"|-----------------------|---------|----------------------|")
print(f"| Regresión Lineal      | {r2_lr:<7.4f} | {rmse_lr:<20.2f}€ |")
print(f"| Random Forest         | {r2_rf:<7.4f} | {rmse_rf:<20.2f}€ |")
print("="*45)
print("✅ Fase 4: ¡Comparación de modelos finalizada!")

# --- FASE 5: ANÁLISIS DE IMPORTANCIA DE VARIABLES ---
print("\n--- Fase 5: Analizando importancia de variables con Random Forest...")
importancias = rf.feature_importances_
df_importancia = pd.DataFrame({'Variable': X.columns, 'Importancia': importancias}).sort_values(by='Importancia', ascending=False)
plt.figure(figsize=(12, 8))
sns.barplot(x='Importancia', y='Variable', data=df_importancia.head(10)) # Top 10
plt.title('Top 10 Variables más Importantes para Predecir el Gasto', fontsize=16)
plt.show()
print("✅ Fase 5: ¡Análisis de importancia completado!")

# --- FASE 6: OBTENER COEFICIENTES PARA EL SIMULADOR DE POWER BI ---
print("\n--- Fase 6: Re-entrenando modelo lineal para el simulador...")
df_simulador = df_maestro.copy()
df_simulador = pd.get_dummies(df_simulador, columns=['Área de actucaravana', 'temporada'], dtype=int)
df_simulador['Reserva anticipada'] = df_simulador['Reserva anticipada'].astype(int)
df_simulador['es_festivo'] = df_simulador['es_festivo'].astype(int)
columnas_a_excluir = ['Gasto total (€)', 'Fecha de entrada', 'Fecha de salida']
X_completo = df_simulador.drop(columns=columnas_a_excluir, errors='ignore').select_dtypes(include=np.number)
y_completo = df_simulador['Gasto total (€)']
modelo_lineal_completo = LinearRegression().fit(X_completo, y_completo)

print("\n\n" + "="*50)
print("--- COPIA Y PEGA ESTOS NÚMEROS EN POWER BI ---")
print("="*50)
print(f"Intercepto: {modelo_lineal_completo.intercept_:.2f}")
for variable, coef in zip(X_completo.columns, modelo_lineal_completo.coef_):
    print(f"Coeficiente para '{variable}': {coef:.2f}")
print("="*50)

print("\n\n✅✅✅ ¡PROCESO FINALIZADO! ✅✅✅")
